# assembly
LDR: till <- från
STR: från -> till
MVN: till -> från
MOV: till -> från

char kan antas vara unsigned char: .SPACE 1
.ALIGN kan behövas om man vill vara försiktig

LDRB: unsigned char
LDRH: unsigned short
LDR: unsigned/signed int
MOV: liten konstant - 0-0xFF
STRB, STRH, STR: samma princip som med LDR-
Försiktig när man laddar adresser dock, de är 32 bit, alltså för stora för 
LDRB. Därför LDR R0,=x; LDRB R0,[R0]

C -> Assembly

char c,d;
void foo(void)
{
    c = ~d;
}

->

c: .SPACE 1
d: .SPACE 1

foo:
    LDR R0,=d       ladda in d's adress till R0
    LDRB R0,[R0]    ladda värdet på d's adress i minnet till R0, alltså d
    MVN R1,R0       MVN: "move not" flyttar negationen av R0, d, till R1
    LDR R0,=c       ladda c's adress till R0
    STRB R1,[R0]    ladda det negerade värdet av d till minnesplatsen av R0
    BX LR           brancha till länkregistret, return i princip


MOV kan ge kodförbättring:
MOV R0,#1 bättre än 
LDR R0,=1

Övning:
Följande deklarationer är gjorda på global nivå, visa hur deklarationerna
uttrycks i assemblerspråk.
char c1,c2;
short s1,s2;
int i1,i2;

visa också hur tilldelningssatserna kan kodas i ARM-v6 assemblerspråk.
c1=c2;
s1=s2;
i1=i2;

1)
.ALIGN
i1: .SPACE 4
i2: .SPACE 4

s1: .SPACE 2
s2: .SPACE 2

c1: .SPACE 2
c2: .SPACE 2
.GLOBL i1,i2,s1,s2,c1,c2


2)
c1=c2;
LDR  R0,=c2
LDRB R0,[R0]
LDR  R1,=c1
STRB R0,[R1]

s1=s2;
LDR  R0,=s2
LDRH R0,[R0]
LDR  R1,=s1
STRH R0,[R1]

i1=i2;
LDR R0,i2       Laddar värdet direkt: samma sak som att ladda adressen sen ladda värdet på den adressen
LDR R1,=i1      Laddar adressen av i1
STR R0,[R1]     Skriver värdet av i2 till adressen av i1

# Samma lösning men utan direkt tilldelning
#LDR R0,=i2
#LDR R0,[R0]
#LDR R1,=i1
#STR R0,[R1]

#Funktionsanrop

f: 
   ...
   BX LR

"BL f" kallar på funktionen

BL <label>: LR <- PC, PC <- label
BX  Rx    : PC <- Rx
B  <label>: PC <- label

#KONVENTION att placera returvärdet på funktionen i R0

#Exempel
char  f1(void);
short f1(void);
int   f1(void);

char  c;
short s;
int   i;

Koda tilldelningarna:
c = f1();
s = f2();
i = f3();

c)
BL   f1
LDR  R1,=c
STRB R0,[R1]

s)
BL   f2
LDR  R1,=s
STRH R0,[R1]

i)
BL  f3
LDR R1,=s
STR R0,[R1] 


#KONVENTION att använda R0-R3 i den ordningen för parametrar till subrutiner
Övriga parametrar läggs på stacken

int isupper (int c)
{
    if (c >= 'A' && c <= 'Z')
        return 1;
    return 0;
}

Följande är gjort
int a,b;

Visa "b=isupper(a);" i assembly:

LDR R0,=a
LDR R0,[R0]
BL  isupper
LDR R1,=b
STR R0,[R1]



#C
int a,b,c;
a = b+c/4 - (b>>2)*c + foo();
(a+1); falskt om a==-1;
(a <= b); falskt om a>b;



Observera att alla operationer utförs på 32-bitars tal i register.
Använd LDRH för unsigned short, LDRB för unsigned char.
Om det är signed (short eller char) måste vi teckenutvidga före operation

signed char c,d;
void foo(void)
{
    c=-d;
}

LDR  R3,=d
LDRB R3,[R3]
SXTB R3,R3
NEG  R3,R3
LDR  R2,=c
STRB R3,[R2]

Binära operationer utförs med tre registerfält där sann register kan förekomma i flera fält.
Alla operationer utförs på 32-bitars tal i register.
# Instruktion  Till, Från1, Från2    I princip: Instruktion  Till,argument1,argument2
ADD 
SUB
MUL
AND, bitwise AND 
ORR, bitwise OR
EOR, bitwise XOR

mask = mask << n;
R0   <- mask
R1   <- n
LSL  R0,R0,R1
mask <- R0

min lösning:

int pack(int year, int month, int day)
{
    int res;
    res = year << 4;
    res |= month << 5;
    res <<= 5;
    res |= day;
    return res;

}

int pack(int year, int month, int day) 
{
    int rval;
    rval = year << 9;    # month ska ju max vara 12 (b1100)(4 bitar) och day 31 (b11111)(5 bitar)
                        # res är alltså year000000000
    rval |= month << 5;
    rval |= day;
    return rval;
}

I assembly:
pack:
    MOV R3,#9    
    LSL R0,R0,R3  #R0 <- year<<9
    MOV R3,#5     
    LSL R1,R1,R3  
    ORR R0,R0,R1  #R0 <- R0 | month<<5
    ORR R0,R0,R2  #R0 <- R0 | day
    BX  LR        #return rval



#Exempel: Uttrycksevaluering
Utgå från att följande är gjorda på global nivå;
char f(void);
int  a,b;

Visa en kodsekvens i assembly, som evaluerar följande uttrycks värde till R0

f() + a * (b&4);

svar:

LDR R1,b
MOV R2,#4
AND R1,R1,R2
NEG R1,R1
LDR R2,a
MUL R1,R1,R2
BL  f 
ADD R0,R0,R1


#EXEMPEL 
Följande deklarationer är gjorda:
void f(int x, int y, int z, int w);
int a,b,c,d;

Visa hur f(a,b,c,d); kodas i assembly

LDR R0,a
LDR R1,b
LDR R2,c
LDR R3,d
BL  f


Funktionen
int rintval(void)
{
    return 0x12345678;
}

kodas:
rintval:
    LDR  R0,=0x12345678
    BX   LR


#KONVENTION att använda registerparet R0:R1 för 64 bitars returvärde

long long rval(void)
{
    return 0x1234567800000000;
}

kodas:
rval:
    MOV R0,#0
    LDR R1,=0x12345678
    BX  LR



#EXEMPEL
Funktionen int testme(int a, int b) är definierad
Visa hur följande funktion kan kodas i assembly:
int f(int x, int y)
{
    if (testme(x,y))
        return 1;
    return 0;
}

svar:
f:  PUSH {LR}
    BL   testme
    CMP  R0,#0
    BEQ  .COND
    MOV  R0,#1
.COND: POP {PC}


#CONDITIONS
BEQ (==) signed/unsigned
BNE (!=) signed/unsigned

BLT (less than) signed
BCC (less than) unsigned

BLE (less than or eq) signed
BLS (less than or eq) unsigned

BGT (greater than) signed
BHI (greater than) unsigned

BGE (greater than or eq) signed 
BCS (greater than or eq) unsigned


Antag att följande deklarationer gjorts på toppnivå:
unsigned int i,j;
int k,l;

Koda följande programsekvens i assembler:
if (i<j )
{
    if (k<l)
        L1;
}
L2;

svar:

LDR R0,i
LDR R1,j
CMP R0,R1
BCS .L2
LDR R2,k
LDR R3,l
CMP R2,R3
BLT .L1
B   .L2


Funktionen isupper skrivs såhär i C:
int isupper(int c) 
{
    if (c >= 'A' && c <= 'Z')
        return 1;
    return 0;
}

och såhär i assembly:
isupper:
    CMP R0,#'A'
    BLT .L1
    CMP R0,#'Z'
    BGT .L1
    (B  .L2?)
.L2:
    MOV R0,#1
    BX  LR
.L1:
    MOV R0,#0
    BX  LR


#SATS
int i,j,k;
if (i>k)
    k=i;
else
    k=j;


    LDR R1,i
    LDR R2,j
    CMP R1,R2
    BGT If_do
If_else:
    MOV R0,R2
    B   If_end
If_do:
    MOV R0,R1
If_end:
    LDR R2,=k
    STR R0,[R2]
        ...

#SATS
int i;
...
while (i < 20)
{
    ...
}

While_continue:
    LDA  i
    CMPA #20
    BGE  While_break
While_do:
    ...
    B   While_continue
While_break:
    ...




All aritmetik utförs med 32 bitar, alla parametrar måste vara 32 bitar.
short och signed char ska därför typkonverteras före anrop.

#EXEMPEL
signed char f(signed char a, signed char b);
signed char x,y,z;

Visa z=f(x,y) i assembly

    LDR  R0,=x
    LDRB R0,[R0]
    SXTB R0,R0
    LDR  R1,=y
    LDRB R1,[R1]
    SXTB R1,R1
    BL   f
    LDR  R1,=x
    STRB R0,[R1]


#EXEMPEL
Gör en lämplig registerallokering för funktionen:
void f(int a, int b, int c)
{
    int d;
    int e;
    ...
}

Om f inte är trivial behövs R0-R3 för uttrycksevaluering etc. Enkel grundrelgel då:
Använd R4,R5 och så vidare till lokal variabler,
konventionen säger att dessa kan vara upptagna av anropade funktion och därför måste de spillas.

#Lösning
Vi ser att R0,R1,R2 redan är upptagna av parametrar, R3 upplåter vi för uttrycksevaluering
i funktionen och gör registerallokeringen:
d=R4, e=R5

Vi får då följande kodning:
f:
    PUSH {R4,R5,LR
    ...
    POP {R4,R5,PC}



#EXEMPEL
Funktionen int g(int) är definierad.
Visa hur följande funktion kan kodas i assembly:
int f(int val)
{
    int i;
    int bits = 0;
    for (i=0; i<val; i++)
    {
        bits = bits | g(i);
    }
    return bits;
}

svar:
#R0:parameter, returvärde
#R4: i
#R5: bits
#R6: val spill från R0

f:   PUSH {R4,R5,R6,LR}
     MOV  R6,R0
     MOV  R5,#0
     MOV  R4,#0
.L1: CMP R4,R6
     BGE .L2
     MOV R0,R4
     BL  g
     ORR R5,R5,R0
     ADD R4,R4,#1
     B   .L1
.L2: MOV R0,R5
     POP {R4,R5,R6,PC}


#C 
Arrays
int intvec[n];
int initintvec[]={10,20,30,40,50};


Utforska arrayen
int main(void)
{
    int initvec[]={10,20,30,40,50};
    for (int i=0; i< sizeof(initvec)/sizeof(int); i++)
        printf("%d ", initvec[i]);
    return 0;
}


Sista karaktären i en string/char array är '\0'
char animal1[] = "Monkey";
char animal2[] = {'M','o','n','k','e','y',0};



strlen ger längden av en sträng inklusive '\0'



int strlen(char s[])
{
    int i = 0;
    while (s[i]!='\0')
        i++
    return i+1

}



char charvec[N];
sizeof(charvec) = N bytes

short shortvec[N];
sizeof(shortvec) = N*2 bytes

int ... N*4 bytes


Fält i assembly
char charvec[5];
LDR  R0,=charvec
LDRB R0,[R0,#5]

char charvec[i];

LDR  R0,=charvec
LDR  R1,i
LDRB R0,[R0,R1]


int i;
short sv[N];
sv[i];
=sv + i*sizeof(short)
LDR   R0,=sv
LDR   R1,i
LSL   R1,R1,#1
LDRSH R0,[R0,R1]


int i;
int iv[N];
iv[i];
=iv + i*sizeof(int)

LDR R0,=iv
LDR R1,i
LSL R1,R1,#2
LDR R0,[R0,R1]


#EXEMPEL
Vi har deklarationerna:
char c; int i;
char vec[15];
Visa hur följande tilldelning kan kodas:
c = vec[i];

Adress till vec[i]=vec+i*sizeof(char)
svar:
LDR  R0,=vec
LDR  R1,i
LDRB R0,[R0,R1]
LDR  R1,=c
STRB R0,[R1]

Samma för shortvec
LDR  R0,=s
LDRH R0,[R0]
LDR  R1,=vec
LDR  R2,i
LSL  R2,R2,#1
STRH R0,[R1,R2]


#EXEMPEL
char mc[N][M];
int i1,i2;

Referens:     mc[i1][i2]
Minnesadress: =mc + ((i1*M)+i2)*sizeof(char)

Kompilatorn ersätter multiplikationer med skift/add kominationer efter mul-instruktionen
tar betydligt fler klockcykler att utföra.
M = 2^x  +  y
Ex då M=10: 10 = 2^3  +  2




#EXEMPEL
int i,j;
int veci[80];
int vm[10][5];

Visa kodsekvenser som evaluerar följande uttryck till R0
a) veci[j]
Adress =veci + j*sizeof(int)
LDR R0,j
LSL R0,R0,#2
LDR R1,=veci
LDR R0,[R1,R0]


b) vm[i][j]
Adress =vm + ((i+5)+j)*sizeof(int)
LDR R3,i
LSL R2,R3,#2
ADD R3,R3,R2
LDR R2,j
ADD R3,R3,R2
LSL R3,R3,#2
LDR R2,=vm
LDR R0,[R2,R3]

#PEKARE
int strlen(char* s)
{
    int i = 0;
    while (*s)
    {
        s++;
        i++;
    }
    return i+1;
}

#EXEMPEL
Vi har deklarationerna:
char c,*cptr;
int *iptr;

Koda följande:
a) cptr = iptr;
LDR R0,iptr
LDR R1,=cptr
STR R0,[R1]

b) *cptr = *iptr;
LDR  R0,iptr
LDR  R0,[R0]
LDR  R1,cptr
STRB R0,[R1]

c) cptr = &c;
LDR R0,=c
LDR R1,=cptr
STR R0,[R1]

d) c = *cptr;
LDR  R0,cptr
LDRB R0,[R0]
LDR  R1,=c
STRB R0,[R1]


#EXEMPEL 
int i;
char vecc[20];

Visa en kodsekvens som evaluerar uttrycket &vecc[i-1] till R0
Lösning:
minnesadress: =vecc + i-1

LDR R0,=vecc
LDR R1,i
SUB R1,R1,#1
ADD R0,R0,R1


int i;
int mi[12][8];
Visa: &mi[i][4]
Lösning:
minnesadress: =mi+(i*8+4)*4
LDR R0,=mi
LDR R1,i
LSL R1,R1,#3
ADD R1,R1,#4
LSL R1,R1,#2
ADD R0,R0,R1



#VAD ÄR EN PORT
En "port" är i själva verket ett register som finns på en kostant adress 
i minnesutrymmet.
För att läsa från, eller skriva till registret måste vi därför kunna
dereferera en konstant.
Alltså måste konstanten först typkonverteras til len pekare, syntaxen kräver då:
"*((typ *) konstant)"

#EXEMPEL
Då en 16-bitars port på adressen 0x40021010 refereras enligt:
    *((volatile unsigned short*) 0x40021010);
Detta kodas i assembly:
LDR  R0,=0x40021010
LDRH R0,[R0]

Användning av en konstant pekare
#EXEMPEL
Visa, såväl i C som i assembly, hur de fyra minst signifikanta bitarna
hos en läs- och skrivbar port på adress 0x40021014 sätts till 1
medan resterande bitarna lämnas opåverkade.
GPIO_ODR

C:
#define GPIO_ODR (*(volatile unsigned short*) 0x40021014)
Volatile för att det kan komma att ändras
*GPIO_ODR |= 0x0F;

Assembly:
LDR  R0,=0x40021014
LDRH R0,[R0]
MOV  R3,#0x0F
ORR  R0,R0,R3
LDR  R1,=0x40021014
STRH R0,[R1]


#Ett första projekt med MD407
Demo: basic_io

void app_init(void)
{
    *((unsigned long*) 0x40020c00) = 0x00005555;
}

void main(void)
{
    unsigned char c;
    app_init();
    while(1)
    {
        c = (unsigned char) *((unsigned short *) 0x40021010);
        *((unsigned char*) 0x40020C14) = c;
    }
}

#STANDARD SET / FÖRSTA PROJEKT I MD407
Anslut GPIO E pin 0-7 till 8 bit dipswitch
Anslut GPIO D pin 0-7 till 8 segment bargraph

__attribute__((naked)) __attribute__((section (".start_section")))
void startup(void)
{
__asm__ volatile(" LDR R0,=x0x2001c000\n"); */ set stack    */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");             */ call main    */
__asm__ volatile(".L1: B .L1\n");           */ never return */
}

void app_init(void)
{
    *((unsigned long *) 0x40020c00) = 0x00005555;

}

void main(void)
{
    unsigned char c;
    app_init();
    while (1)
    {
        c = (unsigned char) * ((unsigned short *) 0x40021010);
        *((unsigned char *) 0x40020c14) = c; 
        */läsning från porten*/
    }
}

Absolut adressering
#EXEMPEL 
0x40021014 // en heltalskonstant (int)
// en pekare (unsigned char) som pekar på adress 0x40021014
(unsigned char*) 0x40021014
// innehåller 8 bitar, på adress 0x40021014 (dereferens)
*((unsigned char*) 0x40021014)

Läs från adressen:
unsgined char value = *((unsigned char *) 0x40021014);

Skriv till adressen:
*((unsigned char *) 0x40021014) = value;

Volatile förhindrar viss optimering (som annars är bra och nödvändig) dvs. indikerar
att kompilatorn måste förmoda att innehållet på en adress kan ändras "från utsidan", dvs en ändring
kan inte upptäckas vid statisk analys av koden.

volatile char * utport = (char *) 0x40021014;
volatile char * inport = (char *) 0x40021014;

#PORTADRESSERING
#define GPIO_E         0x40021000
#define GPIO_E_MODER   ((volatile unsigned int   *)  GPIO_E   )
#define GPIO_E_OTYPER  ((volatile unsigned short *) (GPIO_E+4))
#define GPIO_E_OSPEEDR ((volatile unsigned int   *) (GPIO_E+8))
...

Vita bitar används, gråa används inte

GPIO_ODR kan man skriva ut värden till portpinnarna

...
#define GPIO_E_ODR      ((volatile unsigned short *) (GPIO_E+0x14))
#define GPIO_E_ODR_LOW  ((volatile unsigned char  *) (GPIO_E+0x14))
#define GPIO_E_ODR_HIGH ((volatile unsigned char  *) (GPIO_E+0x15))
...

value = *GPIO_E_ODR_LOW;
*GPIO_E_ODR_HIGH = value;

#PEKARARITMETIK
Följande operationer är tillåtna på pekare:
Adressoperator &
Dereferens     *
Addition av heltalskonstant
Subtraktion av heltalskonstant
Subtraktion av pekare med samma typ
Alla andr aoperationer, som exempelvis skrift, negation, bitvis complement,
multiplikation eller division etc. är meningslösa och därför förbjudna!

#EXEMPEL
char c, *cp1, *cp2;
cp1 = &c;   //OK!
cp2 = &cp1; //WARNING

#EXEMPEL
char *cp1;
cp1 = cp1 + 1;
++cp1;
cp1++;

...


Vid addition och subtraktion, pekartypen avgör hur mkånga bytes som adderas/subtraheras
#EXEMPEL
char *cp = (char *) 0x20001000;
cp++:   // cp är därefter 0x20001001
(cp+1); // Uttryckets värde: 0x20001001

int *ip = (int *) 0x20001000;
ip++;   // ip är därefter 0x20001004
(ip+1); // Uttryckets värde: 0x20001004

ptr + n => ptr + n*sizeof(ptrtype)
ptr - n => ptr - n*sizeof(ptrtype)


Fält eller pekare?
x[y] översätts till *(x+y)
så detta är också en pekare
Indexering är samma sak för pekare och fält

int main(void)
{
    char* s1   = "Emilia";
    char  s2[] = "Emilia";
    // tre likvärdiga sätt att dereferera en pekare/ i ett fält:
    prinft("\'l\' in Emilia (version 1): %c \n", *(s1+3));
    prinft("\'l\' in Emilia (version 2): %c \n",   s2[3]);
    prinft("\'l\' in Emilia (version 2): %c \n",   3[s2]);
    return 0;
}


Fält och pekare är dock inte samma sak

#FÄLT ELLER PEKARE, I KORTHET
#EXEMPEL
char *s1   = "Emilia";
char  s2[] = "Emilia";

s1:
Typ:
    Pekarvairabel
Adressering:
    &s1 = adress till variabel s1
    s1 = s1's värde = textsträngens startadress
    s1 = &(s1[0])
    s1[0] := *s1 -> 'E'
Pekararitmetik:
    s1++      är OK
    (s1+1)[0] är OK
Typstorlek:
    sizeof(s1) = sizeof(char*) = 4 bytes

s2:
Typ:
    Fält
Adressering:
    &s2 är inte möjligt - s2 är bara en symbol
    s2 = symbol = fältets startadress
    s2 = &(s2[0])
    s2[0] := *s2 -> 'E'
Pekararitmetik:
    s2++ är inte möjligt
    (s2+1)[0] är ok
Storlek:
    sizeof(s2) = 7 bytes

s2 är en symbol (ingen variabel) för en adress känd vi kompileringstillfället.
Eftersom s2 är en adress, kan vi dereferera den på samma sätt som en pekare: *s2 -> 'E'.

Assembly:
2000001c <s1>:
2000001c: 20000028

20000020 <s2>:
20000020: "Emil"
20000020: "ia\0"
20000028: "Emil"
2000002c: "ia\0"


#KOPIERING AV TEXTSTRÄNG - strcpy
#EXEMPEL
I standard-C biblioteket finns funktionen strcpy, för att kopiera en ASCII-sträng 
i minnet. Strängslut markeras med tecknet '\0', dvs. 0 och detta tecken ska vara det
sista som kopieras. Funktionen returnerar dest och kan implementeras på följande sätt, visa hur 
strcpy kan kodas i assembly.

char *strcpy(char *dest, char *src)
{
    char *rval = dest;
    do {
        *dest++ = *str++;
    } while ( *(src-1));
    return rval;
}

R0 = &dest
R1 = &src
R2 = temp
R3 = rval

strcpy: MOV  R3,R0
.L0     LDRB R2,[R1]
        STRB R2,[R0]
        ADD  R1,R1,#1
        ADD  R0,R0,#1
        CMP  R2,#0
        BNE  .L0
        MOV  R0,R3
        BX   LR


Fler skäl att använda pekare
Argument är värdeanrop, "pass-by value" i C.


void inc1(int x)
{
    x++;
}

void inc2(int *x)
{
    (*x)++;
}

int main(void)
{
    int x1=0, x2=0;

    inc1( x1);
    inc2(&x2);
    return 0;
}

inc1 kommer inte inte att öka x1's värde, för argumentet är bara en kopia av variabeln
inc2 kommer att öka värdet på x2 eftersom den påverkar värdet på variabelns adress


#PEKARE TILL FUNKTIONER - FUNKTIONSPEKARE
En funktionspekare definiera av:
Returvärdet
Argument och deras respektive typer
Funktionspekarens värde är en adress

#EXEMPEL
int foo0(void );   // funktionsprototyp
int foo1(int x);   // funktionsprototyp
int (*funp) (int); // Deklaration av variabel 'funp'

funp = foo0;       // WARNING, typfel
funp = foo1;       // OK!

Pekare till funktioner:
#EXEMPEL
#include <stdio.h>

int square(int x)
{
    return x*x;
}

int main()
{
    int (*funp)(int);
    funp = square;
    prinft("fp(5)=%i \n", funp(5));
    return 0;
}
// printar funp(5)=25

Vi har följande funktioner
void do_this(void) {}
void do_that(void) {}

Vi kan deklarera en variabel func, som en pekare till en sådan funktion.
void (*func)(void);
Vi har sedan ytterligare ett instrument at tpåverka programflödet:
if (...)
    func=&do_this;
else
    func=&do_that;
    ...
func(); /* do_this eller do_that...*/

Assembly:
    LDR R2,=do_this
    LDR R3,=func
    STR R2,[R3]
    ...
    LDR R3,func
    BLX R3

#EXEMPEL
Visa i C och assembler hur en pekare till funktionen:
    void do_this(void)
placeras på adress 0x2001C000 i minnet 
Tilldelningen kodas i C:
*((void (**)(void)) 0x2001C000) = &do_this;

Tilldelningen kodas i assembler:
    LDR R0,=do_this
    LDR R1,=0x2001C000
    STR R0,[R1]

#PEKARE TILL C-FUNKTIONER PÅ FAST ADRESS I MINNET
#EXEMPEL
En parameterlös subrutin "portinit" för att initiera
hårdvaran i MD407 finns med ingång på adress 0x08000200 i minnet. 
Visa hur denna kan anropas:
a) I assembly
LDR R0,=0x8000200
BLX R0

b) Från ett C-program
#define portinit ((void) (**)(void)) 0x8000200)
void xxx(void)
{
    portinit();
}

#FÄLT SOM PARAMETER TILL FUNKTION
Ett fält i en parameterlista är en pekare
    void foo(int i[]);
[]-notationen finns men betyder pekare, dvs, detta är samm sak som:
    void foo(int *i);
Undviker kopiering av hela fält inför funktionsanropet. Längden av fältet 
behöver inte vara känd.
Dock: fältet kan ändras i en anropade funktionen

Flerdimensionella arrays:
arr[i][j] = arr+i*4+j



GPIO_D och GPIO_E används för generell IO (32 pinnar)

#GPIO-PORTAR
För varje port finns en uppsättning register där respektive pinnes funktion
kan konfigureras. Registren kan läsas eller skrivas med byte, halfword eller word-operationer.
GPIO_X_IDR: Input data register
GPIO_X_ODR: Output data register

De 16 pinnarna i en port kan konfigureras individuellt i mode register (MODER) för 
någon av funktionerna:
00: digital ingång
01: digital utgång
10: alternativ funktion
11: analog funktion
nu behandlar vi pinnarnas funktion som digital IO, dvs. de första två alternativen

GPIO - MODE-REGISTER
GPIO A: 0x40020000
GPIO B: 0x40020400
GPIO C: 0x40020800
GPIO D: 0x40020C00
GPIO E: 0x40021000

Vi vill sätta upp:
port D bitar 0-7 som en 8-bitars utport
port D bitar 8-15 som en 8-bitars inport

Den önskade funktionen får vi om MODE-registret initieras enligt:
offset 31 30 29 28|         ...        17 16|15           ...             0
       0  0  0  0 | 00 00 | 00 00 | 00 0  0 | 01 01 | 01 01 | 01 01 | 01 01
       0          | 0     | 0     | 0       | 5     | 5     | 5     | 5

Bitar 0-7 : 01, alltså digital utgång
Bitar 8-15: 00, alltså digital ingång

Vilket ger:
    *((volatile unsigned int *) 0x40020C00) = 0x00005555;

eller:
    LDR R0,=0x00005555
    LDR R1,=0x40020C00
    STR R0,[R1]


#BASIC IO
#define GPIO_D 0x40020C00
#define GPIO_MODER    ((volatile unsigned int   *) (GPIO_D     ))
#define GPIO_OTYPER   ((volatile unsigned short *) (GPIO_D+0x4 ))
#define GPIO_PUPDR    ((volatile unsigned int   *) (GPIO_D+0xC ))
#define GPIO_IDR_LOW  ((volatile unsigned char  *) (GPIO_D+0x10))
#define GPIO_IDR_HIGH ((volatile unsigned char  *) (GPIO_D+0x11))
#define GPIO_ODR_LOW  ((volatile unsigned char  *) (GPIO_D+0x14))
#define GPIO_ODR_HIGH ((volatile unsigned char  *) (GPIO_D+0x15))

#define USE_ASM
void app_init(void)
{
#ifdef USE_ASM
__asm__ volatile("  LDR R0,=0x00005555\n");
__asm__ volatile("  LDR R1,=0x40020C00\n");
__asm__ volatile("  STR R0,[R1]\n");
#else
    *GPIO_MODER = 0x00005555;
#endif
}

void main(void)
{
    char c;
    app_init();
    while(1)
    {
        c = *GPIO_IDR_HIGH;
        *GPIO_ODR_LOW = c;
    }
}

#PUPDR
För att säkerställa en stabil nivå på ingången kan 
man koppla in ett motstånd till antingen Vdd eller GND
Oavsett vilken lösning vi väljer kan vi alltid avgöra
om brytaren är öppen eller stängd


#IO-PINNE KONFIGURERAD SOM INGÅNG
Vi kan programmera "pull-up" eller "pull-down"-funktion, inget externt
motstånd behövs.

För varje portpinne används 2 bitar i PUPDR för att konfigurera pinnen enligt:
00: floating
01: pullup
10: pulldown
11: reserverad

"push-pull" steg då motsvarande bit i OTYPER är 0
"open drain" steg då motsvarande bit i OTYper är 1

Utgångar från flera push-pull steg får inte kopplas samman, eftersom
det kan leda till kortslutning mellan Vdd och GND.

#OPEN DRAIN
Utgångar från flera open-drain steg kan kopplas samman utan problem.
Nivån på den gemensamma "bussen" bestäms av att:
Om alla utgångar är 1 är också bussnivån 1
Om någon utgång är 0 är också bussnivån 0

#OUTPUT SPEED
Bestämmer hur ofta registrets innehåll överförs till utgångssteget.
Ju lägre frekvens desto mindre strömförbrukning.

För varje portpinne används 2 bitar i OSPEEDR för att konfigurera pinnen enligt:
00: low speed, 2 MHz
01: medium speed, 25 MHz
10: fast speed, 50 MHz
11: high speed, 100 MHz

Om hastigheten är 50 MHz eller mer måste en så kallad "IO-kompensationscell" aktiveras

#MULTIPLEX FUNKTION
Använd samma ingång för flera funktioner

#keyb - RUTIN FÖR AVSÖKNING AV TANGENTBORD
#EXEMPEL
Konstruera en funktion:
    char keyb(void);
Funktionen ska avsöka tangetbordet en gång.
Om ingen tangent är nedtryckt ska funktionen returnera värdet 0xFF.
Om någon tangent är nedtryckt ska dess tangentkod returneras.
Om flera tangenter är nedtryckta är valet av tangentkod, bland dessa, godtyckligt

Algo:
for row 1..4
    activaterow
    col = readcol
    if col != 0
        keyb=value[pressedkey]
keyb = 0xFF

kbdActivate:
void kbdActivate(unsigned int row)
{
    switch(row){
        case 1 : *GPIO_ODR_HIGH = 0x10;break;
        case 2 : *GPIO_ODR_HIGH = 0x20;break;
        case 3 : *GPIO_ODR_HIGH = 0x40;break;
        case 4 : *GPIO_ODR_HIGH = 0x80;break;
        default: *GPIO_ODR_HIGH = 0;
    }
}

kbdGetCol:
int kbdGetCol(void)
{
   unsigned char c;
   if (c&8) return 4;
   if (c&4) return 3;
   if (c&2) return 2;
   if (c&1) return 1;
   return 0;
}

keyb
char keyb(void)
{
    char key[]=
    {1,2,3,0xA,
     4,5,6,0xB,
     7,8,9,0xC,
     0xE,0,0xF,0xD
    };
    int row,col;
    for (row=1;row<5;row++)
    {
        kbdActivate(row);
        if (col=kbdGetCol())
        {
            kbdActivate(0);
            return key[4*(row-1)+(col-1)];
        }
    }
    kbdActivate(0);
    return 0xFF;
}

#ALGO INIT GPIO
Set Port MODER; // Sätt innehåll i MODE registret
if (har_input_pins)
    Set PUPDregister; // sätt innehåll i PUPD
if (har_output_pins)
    Set OTYPER;
    SET OSPEEDR;
if (all_port_pin)
    *GPIO_XXY... = z;
else
    *GPIO &= ~specifika pinnar // anda med negationen av de specifika pinnarna
    *GPIO |= specifika pinnar


#BSSR - SYNKRONISERAD UPPDATERING
Kan användas för en synkroniserad ändring av flera utångars pinnar.
    bit 0..15 : bit reset
    bit 16..31: bit set

BSSR (bit set/reset register)
GPIO_BSSR


#SYNKRONISERING

tc   - cykel tid
tw   - klockpuls (enable) varaktighet (hög eller låg)
tsu1 - styrsignalernas setup-tid, före positiv enable-flank
tsu2 - setup-tid för data, skrivning, före negativ enable-flank
tD   - setup-tid för data, läsning, före negativ enable-flank
th   - hold-tid, varaktighet (efter negativ enable-flank)



Härledning av algo
Byt esom ska överföras:
dataregister: DB 7..0
DB 7
DB 6 - enable (synkroniserande signal)
DB 5 
DB 4 
DB 3
DB 2 - SELECT=1
DB 1 - R/W (läs eller skriv)
DB 0 - RS (kommando eller ASCII-data)

Skriv 8 bitar till controller
styrregister(RW)=0;
vänta tsu1;
styrregister(enable)=1:
dataregister=(8 bitar);
vänta tsu2; (Dock till minst tw förflutit
enable=0;)
vänta tills totalt tc förflutit;

#SYSTIK - RÄKNARKRETS
STK_VAL
STK_CALIB

STK_LOAD   _______________________________  ...
           .        .        .        .
           | .      | .      | .      | .    
STK_VAL -----> .    |   .    |   .    |    
           |     .  |     .  |     .  |       
           |_______.|_______.|_______.|_____... -> t
           0     reload   reload   reload

STK_CTRL (0xE000E010) status och styrregister
rw, bit 16 + 2-0 bitar
Bit 2 (CLKSOURCE) biten är 1 eller RESET:
0: systemklockan/8 (168MHz/8 = 21MHz)
1: systemklocka    (168MHz)
Bit 1 (TICKINT) aktivera avbrott
0: inget avbrott genereras
1: då räknaren slagit om till 0 genererar SysTick avbrott
bit 16 (COUNTFLAG)
Biten är 1 om räknaren räknat ned till 0
Biten nollställs då registret läses
Bit 0 (ENABLE) aktiverar räknare
0: Räknare deaktiverad
1: räknare aktiverad

STK_LOAD (0xE000E014) räknarintervall
rw, 23-0 bitar

#EXEMPEL
Peiodtid= 1/(168*10^-6)s = 6ns

För 168/(168*10^-6) får vi räknarintervallet 1us
                                  ____
COUNTFLAG   _____________________|
               __    __    __    __
KLOCKSIGNAL __|  |__|  |__|  |__|  |__
                 2     1     0  #
Omslaget till 0 sker i slutet av perioden (#) vilket gör 
att den korrekta initieringen för 1us fördröjning blir 168-1 klockcykler


#FÖRDRÖJNING MED SYSTICK
Skapa en funktion delay_250ns(void) som blockerar (fördröjer) den anropade funktionen
med minst 250 ns. Visa också hur denna kan användas för att skapa en fördröjningsrutin:
    delay_micro(unsigned int us) 
som fördröjer programexekveringen variabelt antal mikrosekunder.
#ALGO
    STK_CTRL=0              Återställ SYSTICK
    STK_LOAD = CountValue  
    STK_VAL=0               Nollställ räknarregistret
    STK_CTRL=5              Starta om räknaren
    Vänta  till COUNTFLAG=1
    STK_CTRL=0              Återställ SYSTICK

Lösning:
void delay_250ns(void)
{
    *STK_CTRL = 0;
    *STK_LOAD = 168/4 - 1;
    *STK_VAL  = 0;
    *STK_CTRL = 5;
    while ((*STK_CTRL & 0x10000)==0);
    *STK_CTRL = 0;
}

Lösning:
void delay_mikro(int us)
{
    int i;
    for (i=1;i<us+1;i++)
    {
       delay_250ns(); 
       delay_250ns(); 
       delay_250ns(); 
       delay_250ns(); 
    }
}


#PERIODISKT BLINKANDE DIODRAMP
Vi har en diodramp ansluten till port D (0-7). Demonstrera en applikation som får 
hela rampen att blinka 1 gång/sekund.

se Demonstration: Laborationsuppgift 2.2 under hemsidans "Laboration 2"
Program har helt olika tidsegenskaper då dom utförs i simulator
respektive hårdvara. Använd villkorlig kompilering för att anpassa fördröjning
i exemplet för simulator. (SYNKRONISERING klipp 3)

#PROGRAMMERING av ASCII-Display 
Implementera funktionerna:
ascii_write_controller(cmd/data)
status/data=ascii_read_controller()
status=ascii_read_status()

Kretsen översätter ASCII-tecken till motsvarande bit-mönster via ett enkelt
gränssnitt:
    styrregister - 4 bitar används ?
    dataregister - 8 bitar används ?

#ANSLUTNING AV ASCII-DISPLAY
Vi konfigurerar två 8-bitars portar i GPIO E.
GPIO_IDR, GPIO_ODR
Styrregister 0-7
Data         8-15
LCD-modul DATA PE8-15 är en utport för data till ASCII-styrkretsen
men vänds till en inport då vi läser data från ASCII-styrkretsen

#ÄNDRA ENSTAKA BITAR I STYRREGISTRET (line 1324!)
Masker för kontrollbitar
#define B_E      0x40       Enable-signal
#define B_SELECT 4          Välj ASCII-display
#define B_RW     2          0=write  , 1=read
#define B_RS     1          0=control, 1=data


void ascii_ctrl_bit_set(char x)
{*/x: bitmask bits are 1 to set */
    char c;
    c = *GPIO_E_ODR_LOW;
    *GPIO_E_ODR_LOW = B_SELECT | x | c;
}

void ascii_ctrl_bit_clear(char x)
{*/x: bitmask bits are 1 to clear */
    char c;
    c = *GPIO_E_ODR_LOW;
    c = c & ~x;
    *GPIO_E_ODR_LOW = B_SELECT | c;
}

Alternativt, använd "macro"-definitioner
#define ASCII_CTRL_BIT_SET(x)  \
        *GPIO_E_ODR_LOW =      \
        (B_SELECT | x | *GPIO_E_ODR_LOW)

#define ASCII_CTRL_BIT_CLEAR(x) \
        *GPIO_E_ODR_LOW =       \
        (B_SELECT | (*GPIO_E_ODR_LOW & ~(x)))

#GE KOMMANDO TILL STYRKRETS
Formulering av algoritm för att överföra ett specifikt kommando till styrkrets
(SE LEKTION 7 KLIPP 6 början)

#EXEMPEL
Kodning för att skriva kommandot "Clear display"
Vänta tills display är klar att ta emot kommando
while ((ascii_read_status() & 0x80)==0x80) {}
delay_micro(8);       // latenstid för kommando
ascii_write_cmd(1);   // kommando: "Clear display"
delay_milli(2);       // i stället för 1,53ms

#STATUS = ascii_read_status()
För att läsa från styrkretsen måste vi "vända" riktningen hos port E15-E8 ("dataregistret")
Algo_
ascii_read_status
Sätt PortE bit15-8 som ingångar
RS=0;
RW=1;
rv=ascii_read_controller
Sätt PortE bit15-8 som utgångar
return rv

char ascii_read_status(void)
{
    char c;
    
    *GPIO_E_MODER = 0x00005555;
    ascii_ctrl_bit_set  (B_RW);
    ascii_ctrl_bit_clear(B_RS);
    c = ascii_read_controller();

    *GPIO_E_MODER = 0x55555555;
    return c;
}

#ascii_read_controller(cmd)
Algo:
ascii_read_controller
E=1;
delay360ns
rv = DATA_REG;   
E=0;
return rv;

char ascii_read_controller(void)
{
    char c:
    ascii_ctrl_bit_set(B_E);

    delay_250ns();
    delay_250ns();

    c = *GPIO_E_IDR_HIGH;

    ascii_ctrl_bit_clear(B_E);

    return c;
}


#ascii_write_controller(cmd)
Implementering av algoritment RS och RW är klara
Algo:
ascii_write_controller(cmd)
delay40ns
E=1;
DATA_REG = cmd
delay230ns
E=0;
delay10ns

void ascii_write_controller(char c)
{
    ascii_ctrl_bit_set(B_E);
    *GPIO_E_ODR_HIGH = c;
    ascii_ctrl_bit_clear(B_E);
    delay_250ns();
}
